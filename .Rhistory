find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
library()
install.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
install.packages("manipulate")
x<- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x <- matrix (1:10, 4, 6)
x <- matrix (1:10, 2, 5)
x
apply (x, 2, mean)
apply (x, 1, sum)
rowsums(x)
rowSums(x)
colSums(x)
rowMeans(x)
rowSums(x)
colMeans(x)
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 2, quantile, probs = c(0.25, 0.75))
a <- array(1:40, 2 * 2 * 10), c(2, 2, 10)
a <- array(1:40), c(2, 2, 10)
a <- array(1:40, c(2, 2, 10))
a
apply(a, c(1, 2), mean)
rowMeans(a, dims = 2)
str(mapply)
b <- list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
b
mapply(rep, 1:4, 4:1)
str(tapply)
## X is a vector
## index is a factor or a list of factors(or else they are coerced into factors)
## FUN is a function to be applied
## ... contains other args to be passed to FUN
## simplify = should we simplify the result?
## tapply applies a function over subsets of a vector
str(split)
## x is a vector (or list) of data frame
## f is a factor or a list of factors
## drop indicates whether empty factors levels should be dropped
?gl()
X <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
f
split(x, f)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
f
split (x, f)
lapply(split(x, f), mean)
airquality<-read.csv("hw1_data.csv")
setwd("D:/OneDrive/R")
airquality<-read.csv("hw1_data.csv")
airquality
head(airquality)
## calc mean of each column, by month
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
s
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind", na.rm=TRUE)]))
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind",)]), na.rm=TRUE)
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind",)]) na.rm=TRUE)
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind",)])), na.rm=TRUE
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind",)], na.rm=TRUE))
sapply(x, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1, f2)
inter <- interaction(f1, f2)
str(split(x, inter))
str(split(x, inter), drop=TRUE)
split(x, inter), drop=TRUE)
str(split(x, inter), drop=TRUE)
str(split(x, list(f1, f2), drop=TRUE))
str(split(x, inter, drop=TRUE))
log(01)
log(-1)
printmessage <- function(X) {}
printmessage <- function(x) {
if(x>0)
print("x is greater than 0")
else
print("x is less than or equal to zero")
invisible(x)
}
printmessage(1)
printmessage(NA)
printmessage <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is greater than 0")
else
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
printmessage(x)
mean(x)
traceback()
debug(lm)
lm(y-x)
options(error = recover)
read.csv("nosuchfile")
library(datasets)
data(iris)
?iris
isis
iris
split(iris, iris$species)
s <- split(iris, iris$Species)
s
apply(s, 2, mean)
apply(s$Sepal.Length, mean)
apply(s, mean)
> library(datasets)
> data(iris)
library(datasets)data(iris)
library(datasets)
data(iris)
iris
s <- split(iris)
s <- split(iris, iris$species)
s <- split(iris, iris$Species)
lapply(s, mean)
s
mean(s$virginica)
colmeans(s)
colMeans(s)
lapply(s, function(x) colMeans(x[, Sepal.Length]))
lapply(s, function(x) colMeans(Sepal.Length))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
z <- s$virginica
z
apply(z, mean)
lapply(z, mean)
lappy(z$Sepal.Length, mean)
lapply(z$Separl.Length, mean)
lapply(z$Sepal.Length, mean)
sapply(z$Sepal.Length, 2, mean)
sapply(z$Sepal.Length, mean
)
apply(z$Sepal.Length, mean)
apply(z$Sepal.Length, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
foo <- tapply(mtcars$hp, mtcars$cyl, mean)
foo
foo[8] - foo[4]
foo["8"] - foo["4"]
debug(ls)
ls
library(datasets)
data(iris)
iris
tapply(iris, iris$Species, mean)
tapply(iris, mean)
apply(iris[, 1:4], 2, mean)
lapply(iris, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
tapply(iris$Sepal.Length, iris$Species, mean)
with(iris, tapply(Sepal.Length, Species, mean))
apply(iris[, 1:4], 2, mean)
data(mtcars)
apply(iris[, 1:4], 2, mean)
with(cars, tapply(mpg, am, mean))
str(mtcars)
> cars <- within(mtcars,
+   am <- factor(am, levels=0:1, labels=c("Automatic", "Manual"))
+ )
cars <- within(mtcars, am <- factor(am, levels=0:1, labels=c("Automatic", "Manual")))
str(mtcars)
with(cars, tapply(mpg, am, mean))
with(cars, tapply(mpg, cyl, mean))
with(cars, tapply(hp, cyl, mean))
zzz <- with(cars, tapply(hp, cyl, mean))
zzz[8]-zzz[4]
zzz["8"]-zzz["4"]
setwd("D:/OneDrive/R/GitHub/repos/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vect <- 1:100
makeVector(vect)
cachemean(vect)
made <- makeVector(vect)
made
cachemean(made)
cachemean(made)
x <- matrix(1:100, 25, 25)
x
x <- matrix (1:9, 3, 3)
x
solve(x)
x <- matrix (1:4, 2, 2)
solve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
mat <- matrix(1:16, 4, 4)
makeVector(mat)
made <- makeVector(mat)
cachemean(made)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheinverse <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
mat <- matrix(1:4, 2, 2)
makeVector(mat)
made <- makeVector(mat)
cacheinverse(made)
cacheinverse(made)
mat <- matrix(1:25, 5, 5)
made <- makeVector(mat)
cacheinverse(made)
mat <- matrix(1:9, 3, 3)
mat
makeVector(mat)
solve(mat)
mat <- matrix(rnorm(1:10), 3, 3)
mat <- matrix(rnorm(1:9), 3, 3)
mat
solve(mat)
makeVector(mat)
made <- makeVector(mat)
cacheinverse(made)
cacheinverse(made)
